/PROG RDK_CELL1_HS
/ATTR
COMMENT = "hs init";
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= 0;
DEFAULT_GROUP = 1,*,1,1,*;
/MN
 : ! ***************** ;
 : ! robodk initialization ;
 : ! ----------------- ;
 : ! Initialization program for ;
 : ! transverse templates (eg. ;
 : ! Bands, Spiral, Pads). ;
 : ! -Sets UF and UT offsets. ;
 : ! -Convert any inch dimensions to ;
 : ! mm ;
 : ! -Include beam width into start ;
 : ! and stop measurements ;
 : ! -Calculate layer bevelling in ;
 : ! the x-direction. ;
 : ! -Calculate layer step offset ;
 : ! -make PR's for start off set ;
 : ! position, as well as a PR for ;
 : ! the approch point ;
 : ! ***************** ;
 :  ;
 :  ;
 : ! run parameter file ;
 : CALL SR[2] ;
 :  ;
 : ! Call Home ;
 : ! ----------- ;
 : IF (DO[98:skipHTHome] OR F[5:Hmi_Dry_Run]),JMP LBL[101] ;
 : ! warn when indecies are <> 0 ;
 : CALL INDEXSET ;
 : ! abort when chuck is not zeroed. ;
 : CALL CHECKROTZERO ;
 : CALL G1_HOME_RBT_HTSTOCK ;
 : CALL G4_HOME_HT_STOCK ;
 : LBL[101] ;
 :  ;
 : IF (DO[22:Laser_Aiming_Beam]),JMP LBL[102] ;
 : ! Turn aiming beam on ;
 : DO[22:Laser_Aiming_Beam]=ON ;
 : LBL[102] ;
 :  ;
 : ! Uframe rotation ;
 : CALL UF_DIAMROT(R[237:diameter],69) ;
 : R[69:UF_zRot]=(-1)*R[69:UF_zRot] ;
 : ! look into modifying the r of ;
 : ! the leader frame ;
 : ! default static frame ;
 : PR[GP4:69,1:Rotate_Offset]=R[69:UF_zRot] ;
 :  ;
 : ! Utool rotation ;
 : CALL TOOLCHANGE ;
 :  ;
 : ! Set Frames ;
 : UFRAME_NUM=0 ;
 : UTOOL_NUM=1 ;
 :  ;
 : ! clear offset registers ;
 : CALL CLRPR(58) ;
 : CALL CLRPR(59) ;
 : CALL CLRPR(25) ;
 : CALL CLRPR(26) ;
 :  ;
 : ! might have to incorperate x & y ;
 : ! offsets ;
 : ! as well to keep ;
 : ! headstock offset ;
 : CALL SETOFFST(58,4,1,R[226:ofst_apr],1) ;
 : ! depart offset ;
 : CALL SETOFFST(59,4,1,R[227:ofst_dpt],1) ;
 : ! laser start ;
 : CALL SETOFFST(25,4,1,R[198:ofst_lasStart],1) ;
 : ! laser stop ;
 : CALL SETOFFST(26,4,1,R[199:ofst_lasStop],1) ;
 :  ;
 : ! translational offsets ;
 : CALL SETOFFST(69,4,1,R[220:ofst_xRot],1) ;
 : CALL SETOFFST(69,3,1,R[218:ofst_zStart],0) ;
 : ! x & y offsets would have to be ;
 : ! modified ;
 : ! on each index need to convert ;
 : ! into cartesian ;
 : ! space in background ;
 : CALL SETOFFST(69,1,1,R[216:ofst_xStart],0) ;
 : CALL SETOFFST(69,1,1,R[217:ofst_yStart],0) ;
 :  ;
 : ! add trans offsets into ;
 : ! start/stops ;
 : ! ADD PR offsets ;
 : PR[25:Start_Offset]=PR[25:Start_Offset]+PR[69:Rotate_Offset] ;
 : PR[58:Offst_apprch]=PR[58:Offst_apprch]+PR[25:Start_Offset] ;
 : PR[26:Stop_Offset]=PR[26:Stop_Offset]+PR[69:Rotate_Offset] ;
 : PR[59:Offst_dprt]=PR[59:Offst_dprt]+PR[26:Stop_Offset] ;
 :  ;
 : ! initialize dimensions ;
 : CALL DIM_CHECKS ;
 :  ;
 : ! Rail calculations ;
 : CALL RAIL_CALC ;
 :  ;
 : ! swap variables ;
 : R[314:lengthswap]=R[240:length] ;
 : R[317:pitchSwap]=R[253:pitch] ;
 : R[312:passSwap]=R[285:passes] ;
 : R[334:passPauseSwap]=R[318:passPause] ;
 : R[186:ofst_LayerXSwap]=R[229:ofst_LayerX] ;
 :  ;
 : TIMER[3]=RESET ;
 : TIMER[4]=RESET ;
 : CALL G0_LASER_ENABLE ;
 : CALL POWDERATES ;
 : CALL LASERPOWER(R[30:HMI_Laser_Power]) ;
 :  ;
 : IF (F[5:Hmi_Dry_Run]),JMP LBL[103] ;
 : CALL POS_HT_POWDER1 ;
 : TIMER[4]=START ;
 : CALL G0_POWDER_START ;
 : LBL[103] ;
 : IF (!DO[98:skipHTHome]),CALL POS_HT_INTER ;
 :  ;
 : ! start layer loop ;
 : R[288:l]=R[308:lStart] ;
 : LBL[104] ;
 : IF R[288:l]>=R[289:layers],JMP LBL[105] ;
 : CALL POWDERATES ;
 : CALL SPEEDRATES(R[237:diameter]) ;
 : IF ((R[289:layers]<=1) OR (R[288:l]>=R[289:layers]) OR (R[288:l]<=R[308:lStart]) OR (R[196:isTest]<>1)),JMP LBL[106] ;
 : CALL GST_HT_PAUSE ;
 : CALL POS_HT_INTER ;
 : LBL[106] ;
 : R[290:m]=R[309:mStart] ;
 : LBL[107] ;
 : IF R[290:m]>=R[291:bands],JMP LBL[108] ;
 : R[286:k]=R[307:kStart] ;
 : LBL[109] ;
 : IF R[286:k]>=R[287:pockets],JMP LBL[110] ;
 : IF ((R[321:pocketPause]<=0) OR (R[286:k]<=R[307:kStart])),JMP LBL[111] ;
 : IF ((R[286:k] MOD R[321:pocketPause]<>0)),JMP LBL[112] ;
 : CALL GST_PAUSE ;
 : CALL POS_POS_APPR(R[315:tRadius]) ;
 : LBL[112] ;
 : LBL[111] ;
 : ! add pocket offsets ;
 : ! add offsets ;
 : PR[69:Rotate_Offset]=PR[27:Ofst_UFRot]+PR[69:Rotate_Offset] ;
 : PR[GP4:69,1:Rotate_Offset]=(PR[GP4:69,1:Rotate_Offset]+R[251:pocketSep]*R[286:k]) ;
 : PR[25:Start_Offset]=PR[25:Start_Offset]+PR[69:Rotate_Offset] ;
 : PR[26:Stop_Offset]=PR[26:Stop_Offset]+PR[69:Rotate_Offset] ;
 : PR[58:Offst_apprch]=PR[58:Offst_apprch]+PR[25:Start_Offset] ;
 : PR[59:Offst_dprt]=PR[59:Offst_dprt]+PR[26:Stop_Offset] ;
 : ! start on pass ;
 : R[284:j]=R[306:jStart] ;
 : ! call path program ;
 : CALL SR[3] ;
 : R[286:k]=R[286:k]+1 ;
 : JMP LBL[109] ;
 : LBL[110] ;
 : ! end pockets ;
 : R[290:m]=R[290:m]+1 ;
 : JMP LBL[107] ;
 : LBL[108] ;
 : ! end bands ;
 : R[288:l]=R[288:l]+1 ;
 : JMP LBL[104] ;
 : LBL[105] ;
 : ! end layers ;
 :  ;
 : LBL[100:exit] ;
/END
